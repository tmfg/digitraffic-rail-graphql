type Query {
    train(trainNumber : Int, departureDate : Date) : Train
    trainsByDepartureDate(departureDate : Date, where : TrainWhere, orderBy : TrainOrderBy, skip: Int, take : Int) : [Train]
    #    trainsByDepartureDateAndTrainNumberGreaterThan(departureDate : Date, trainNumberGreaterThan : Int, where : TrainWhere) : [Train]
    trainsByVersionGreaterThan(version : String, where : TrainWhere, orderBy : TrainOrderBy, skip: Int, take : Int) : [Train]
    trainsByStationAndQuantity(station : String, arrivedTrains : Int, arrivingTrains : Int,departedTrains : Int,departingTrains : Int, includeNonStopping : Boolean, trainCategories : [String], where : TrainWhere, orderBy : TrainOrderBy, skip: Int, take : Int) : [Train]
    latestTrainLocations(where : TrainLocationWhere, orderBy : TrainLocationOrderBy, skip: Int, take : Int) : [TrainLocation]
    compositionsGreaterThanVersion(version : String, where : CompositionWhere, orderBy: CompositionOrderBy, skip: Int, take : Int) : [Composition]
    trainTrackingMessagesByVersionGreaterThan(version : String, where : TrainTrackingMessageWhere, orderBy: TrainTrackingMessageOrderBy, skip: Int, take : Int) : [TrainTrackingMessage]
    routesetMessagesByVersionGreaterThan(version : String, where : RoutesetMessageWhere, orderBy: RoutesetMessageOrderBy, skip: Int, take : Int) : [RoutesetMessage]
}

type Train {
    cancelled : Boolean
    commuterLineid : String
    deleted : Boolean
    departureDate : Date
    operatorShortCode : String
    runningCurrently : Boolean
    timetableAcceptanceDate : DateTime
    timetableType : TimetableType
    trainNumber : Int
    version : String
    trainTypeId : Int
    trainCategoryId : Int
    operator : Operator
    trainType : TrainType
    timeTableRows(where : TimeTableRowWhere, orderBy: TimeTableRowOrderBy, take : Int) : [TimeTableRow]
    trainLocations(where : TrainLocationWhere, orderBy : TrainLocationOrderBy, take : Int) : [TrainLocation]
    compositions(where : CompositionWhere, take : Int) : [Composition]
    trainTrackingMessages(where : TrainTrackingMessageWhere, take : Int) : [TrainTrackingMessage]
    routesetMessages(where : RoutesetMessageWhere, take : Int): [RoutesetMessage]
}

type TrainType {
    id : Int
    name : String
    trainCategoryId : Int
    trainCategory : TrainCategory
}

type TrainCategory {
    id : Int
    name : String
}

type TimeTableRow {
    stationShortCode : String
    stationUICCode : Int
    countryCode : String
    type : TimeTableRowType
    trainStopping : Boolean
    commercialStop : Boolean
    commercialTrack : String
    cancelled : Boolean
    scheduledTime : DateTime
    actualTime : DateTime

    id : Int
    trainNumber : Int
    departureDate : Date

    station : Station
    causes(where : CauseWhere, take : Int) : [Cause]
}

type Cause {
    timeTableRowId : Int
    trainNumber : Int
    departureDate : Date

    id : Int
    categoryCodeId : Int
    detailedCategoryCodeId : Int
    thirdCategoryCodeId : Int
    categoryCode : CategoryCode
    detailedCategoryCode : DetailedCategoryCode
    thirdCategoryCode : ThirdCategoryCode
}

type Operator {
    name : String
    shortCode : String
    uicCode : Int
}

type TrainLocation {
    departureDate : Date
    speed : Int
    timestamp : DateTime
    trainNumber : Int
    location : [Float]
    train : Train
}

type Composition {
    departureDate : Date
    trainNumber : Int
    operatorShortCode : String
    trainCategoryId : Int
    trainTypeId : Int
    version : String
    operatorUicCode : Int
    train : Train
    journeySections(where : JourneySectionWhere, take : Int) : [JourneySection]
}

type JourneySection {
    id : Int
    departureDate : Date
    trainNumber : Int
    beginTimeTableRowId : Int
    endTimeTableRowId : Int
    maximumSpeed : Int
    totalLength : Int
    startTimeTableRow : TimeTableRow
    endTimeTableRow : TimeTableRow
    wagons(where : WagonWhere, take : Int) : [Wagon]
    locomotives(where : LocomotiveWhere, take : Int) : [Locomotive]
}

type Locomotive {
    id : Int
    location : Int
    locomotiveType : String
    powerTypeAbbreviation : String
    journeysectionId : Int
    vehicleNumber : String
}

type Wagon {
    id : Int
    length : Int
    location : Int
    salesNumber : Int
    journeysectionId : Int
    catering : Boolean
    disabled : Boolean
    luggage : Boolean
    pet : Boolean
    playground : Boolean
    smoking : Boolean
    video : Boolean
    wagonType : String
    vehicleNumber : String
}

type Station {
    id : Int
    passengerTraffic : Boolean
    countryCode : String
    location : [Float]
    name : String
    shortCode : String
    uicCode : Int
    type : StationType
}

type CategoryCode {
    code : String
    name : String
    id : Int
    validFrom : Date
    validTo : Date
}

type DetailedCategoryCode {
    code : String
    name : String
    id : Int
    categoryCodeId : Int
    validFrom : Date
    validTo : Date
}

type ThirdCategoryCode {
    code : String
    name : String
    description : String
    id : Int
    validFrom : Date
    validTo : Date
    detailedCategoryCodeId : Int
}

type TrainTrackingMessage {
    id : Int
    trainNumber : String
    departureDate : Date
    stationShortCode : String
    nextStationShortCode : String
    previousStationShortCode : String
    version : String
    timestamp : DateTime
    trackSection : String
    nextTrackSection : String
    previousTrackSection : String
    type : TrainTrackingMessageType
    station : Station
    nextStation : Station
    previousStation : Station
    train : Train
}

type RoutesetMessage {
    id : Int
    version : String
    messageTime : DateTime
    trainNumber : String
    departureDate : Date
    routeType : String
    clientSystem : String
    routesections(where : RoutesectionWhere, take : Int) : [Routesection]
    train : Train
}

type Routesection {
    sectionId : String
    commercialTrackId : String
    stationCode : String
    routesetId : Int
    station : Station
}

## SCALARS

scalar Date
scalar DateTime

## ENUMS

enum TimetableType {
    REGULAR,
    ADHOC
}
enum TimeTableRowType {
    ARRIVAL
    DEPARTURE
}

enum StationType {
    STATION, STOPPING_POINT, TURNOUT_IN_THE_OPEN_LINE
}
enum TrainTrackingMessageType {
    OCCUPY,RELEASE
}

## ORDERBYs

#input TrainOrderBy {
#    cancelled : OrderDirection
#    commuterLineid : OrderDirection
#    deleted : OrderDirection
#    departureDate : OrderDirection
#    runningCurrently : OrderDirection
#    timetableAcceptanceDate : OrderDirection
#    timetableType : OrderDirection
#    trainNumber : OrderDirection
#    version : OrderDirection
#        operator : OperatorOrderBy
#        trainType : TrainTypeOrderBy
#
#    #    timeTableRows : TimeTableRowWhere
#    #    trainLocations : TrainLocationWhere
#    #    compositions : CompositionWhere
#}
#
#input TimeTableRowOrderBy {
#    type : OrderDirection
#    trainStopping : OrderDirection
#    commercialStop : OrderDirection
#    commercialTrack : OrderDirection
#    cancelled : OrderDirection
#    scheduledTime : OrderDirection
#    actualTime : OrderDirection
#
#    trainNumber : OrderDirection
#    departureDate : OrderDirection
#
#    station : StationOrderBy
#    #    causes(where : CauseWhere, take : Int) : [Cause]
#}
#
#input StationOrderBy {
#    passengerTraffic : OrderDirection
#    countryCode : OrderDirection
#    #    location : [Float]
#    name : OrderDirection
#    shortCode : OrderDirection
#    uicCode : OrderDirection
#    type : OrderDirection
#}
#
#input TrainLocationOrderBy {
#    train : TrainOrderBy
#    speed : OrderDirection
#    timestamp : OrderDirection
#}

enum OrderDirection {
    ASCENDING,
    DESCENDING
}

input OrderBy {
    direction: OrderDirection
}

## FILTERS

input TrainWhere {
    and : [TrainWhere]
    or : [TrainWhere]

    cancelled : BooleanWhere
    commuterLineid : StringWhere
    deleted : BooleanWhere
    departureDate : DateWhere
    runningCurrently : BooleanWhere
    timetableAcceptanceDate : DateTimeWhere
    timetableType : EnumWhere
    trainNumber : IntegerWhere
    version : VersionWhere
    operator : OperatorWhere
    trainType : TrainTypeWhere
    #    timeTableRows : TimeTableRowWhere
    #    trainLocations : TrainLocationWhere
    #    compositions : CompositionWhere
}

input TimeTableRowWhere {
    and : [TimeTableRowWhere]
    or : [TimeTableRowWhere]
    type : EnumWhere
    trainStopping : BooleanWhere
    commercialStop : BooleanWhere
    commercialTrack : StringWhere
    cancelled : BooleanWhere
    scheduledTime : DateTimeWhere
    actualTime : DateTimeWhere
    station : StationWhere
    #    causes : CauseWhere
}

input TrainTypeWhere {
    and : [TrainTypeWhere]
    or : [TrainTypeWhere]
    name : StringWhere
    trainCategory : TrainCategoryWhere
}

input TrainCategoryWhere {
    and : [TrainCategoryWhere]
    or : [TrainCategoryWhere]
    name : StringWhere
}

input OperatorWhere {
    and : [OperatorWhere]
    or : [OperatorWhere]
    name : StringWhere
    shortCode : StringWhere
    uicCode : IntegerWhere
}

input StationWhere {
    and : [StationWhere]
    or : [StationWhere]
    passengerTraffic : BooleanWhere
    countryCode : StringWhere
    #    location : CoordinateWhere
    name : StringWhere
    shortCode : StringWhere
    uicCode : IntegerWhere
    type : EnumWhere
}

input CauseWhere {
    and : [CauseWhere]
    or : [CauseWhere]
    categoryCode : CategoryCodeWhere
    detailedCategoryCode : DetailedCategoryCodeWhere
    thirdCategoryCode : ThirdCategoryCodeWhere
}

input CategoryCodeWhere {
    and : [CategoryCodeWhere]
    or : [CategoryCodeWhere]
    code : StringWhere
    name : StringWhere
    validFrom : DateWhere
    validTo : DateWhere
}

input DetailedCategoryCodeWhere {
    and : [DetailedCategoryCodeWhere]
    or : [DetailedCategoryCodeWhere]
    code : StringWhere
    name : StringWhere
    validFrom : DateWhere
    validTo : DateWhere
}

input ThirdCategoryCodeWhere {
    and : [ThirdCategoryCodeWhere]
    or : [ThirdCategoryCodeWhere]
    code : StringWhere
    name : StringWhere
    description : StringWhere
    validFrom : DateWhere
    validTo : DateWhere
}

input TrainLocationWhere {
    and : [TrainLocationWhere]
    or : [TrainLocationWhere]
    speed : IntegerWhere
    timestamp : DateTimeWhere
    #    location : CoordinateWhere
    train : TrainWhere
}

input CompositionWhere {
    and : [CompositionWhere]
    or : [CompositionWhere]
    version : VersionWhere
    train : TrainWhere
    journeySections : JourneySectionWhere
}

input JourneySectionWhere {
    and : [JourneySectionWhere]
    or : [JourneySectionWhere]
    maximumSpeed : IntegerWhere
    totalLength : IntegerWhere
    startTimeTableRow : TimeTableRowWhere
    endTimeTableRow : TimeTableRowWhere
    wagons : WagonWhere
    locomotives : LocomotiveWhere
}

input LocomotiveWhere {
    and : [LocomotiveWhere]
    or : [LocomotiveWhere]
    location : IntegerWhere
    locomotiveType : StringWhere
    powerTypeAbbreviation : StringWhere
    vehicleNumber : StringWhere
}

input WagonWhere {
    and : [WagonWhere]
    or : [WagonWhere]
    id : IntegerWhere
    length : IntegerWhere
    location : IntegerWhere
    salesNumber : IntegerWhere
    catering : BooleanWhere
    disabled : BooleanWhere
    luggage : BooleanWhere
    pet : BooleanWhere
    playground : BooleanWhere
    smoking : BooleanWhere
    video : BooleanWhere
    wagonType : StringWhere
    vehicleNumber : StringWhere
}

input TrainTrackingMessageWhere {
    and : [TrainTrackingMessageWhere]
    or : [TrainTrackingMessageWhere]
    id : IntegerWhere
    version : VersionWhere
    timestamp : DateTimeWhere
    trackSection : StringWhere
    nextTrackSection : StringWhere
    previousTrackSection : StringWhere
    type : EnumWhere
    station : StationWhere
    nextStation : StationWhere
    previousStation : StationWhere
    train : TrainWhere
}

input RoutesetMessageWhere {
    and : [RoutesetMessageWhere]
    or : [RoutesetMessageWhere]
    id : IntegerWhere
    version : VersionWhere
    messageTime : DateTimeWhere
    trainNumber : StringWhere
    departureDate : DateWhere
    routeType : StringWhere
    clientSystem : StringWhere
    routesections : RoutesectionWhere
    train : TrainWhere
}

input RoutesectionWhere {
    and : [RoutesectionWhere]
    or : [RoutesectionWhere]
    sectionId : StringWhere
    commercialTrackId : StringWhere
    stationCode : StringWhere
    station : StationWhere
}

## PRIMITIVE FILTERS

input BooleanWhere {
    eq : Boolean
}

input StringWhere {
    eq : String
}

input IntegerWhere {
    eq : Int
    gt : Int
    lt : Int
}

input EnumWhere {
    eq : String
}

input DateTimeWhere {
    eq : DateTime
    gt : DateTime
    lt : DateTime
}

input DateWhere {
    eq : Date
    gt : Date
    lt : Date
}

input CoordinateWhere {
    inside : [Float]
}

input VersionWhere {
    eq : String
    gt : String
    lt : String
}
