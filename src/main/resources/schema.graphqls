type Query {
    train(trainNumber : Int, departureDate : Date) : Train
    trainsByDepartureDate(departureDate : Date, where : TrainFilter) : [Train]
    #    trainsByDepartureDateAndTrainNumberGreaterThan(departureDate : Date, trainNumberGreaterThan : Int, where : TrainFilter) : [Train]
    trainsByVersionGreaterThan(version : String, where : TrainFilter) : [Train]
    trainsByStationAndQuantity(station : String, arrivedTrains : Int, arrivingTrains : Int,departedTrains : Int,departingTrains : Int, includeNonStopping : Boolean, trainCategories : [String], where : TrainFilter) : [Train]
    latestTrainLocations(where : TrainLocationFilter) : [TrainLocation]
    compositionsGreaterThanVersion(version : String, where : CompositionFilter) : [Composition]
    trainTrackingMessagesByVersionGreaterThan(version : String, where : TrainTrackingMessageFilter) : [TrainTrackingMessage]
    routesetMessagesByVersionGreaterThan(version : String, where : RoutesetMessageFilter) : [RoutesetMessage]
}

type Train {
    cancelled : Boolean
    commuterLineid : String
    deleted : Boolean
    departureDate : Date
    operatorShortCode : String
    runningCurrently : Boolean
    timetableAcceptanceDate : DateTime
    timetableType : TimetableType
    trainNumber : Int
    version : String
    trainTypeId : Int
    trainCategoryId : Int
    operator : Operator
    trainType : TrainType
    timeTableRows : [TimeTableRow]
    trainLocations : [TrainLocation]
    compositions : [Composition]
    trainTrackingMessages : [TrainTrackingMessage]
    routesetMessages: [RoutesetMessage]
}

type TrainType {
    id : Int
    name : String
    trainCategoryId : Int
    trainCategory : TrainCategory
}

type TrainCategory {
    id : Int
    name : String
}

type TimeTableRow {
    stationShortCode : String
    stationUICCode : Int
    countryCode : String
    type : TimeTableRowType
    trainStopping : Boolean
    commercialStop : Boolean
    commercialTrack : String
    cancelled : Boolean
    scheduledTime : DateTime
    actualTime : DateTime

    id : Int
    trainNumber : Int
    departureDate : Date

    station : Station
    causes : [Cause]
}

type Cause {
    timeTableRowId : Int
    trainNumber : Int
    departureDate : Date

    id : Int
    categoryCodeId : Int
    detailedCategoryCodeId : Int
    thirdCategoryCodeId : Int
    categoryCode : CategoryCode
    detailedCategoryCode : DetailedCategoryCode
    thirdCategoryCode : ThirdCategoryCode
}

type Operator {
    name : String
    shortCode : String
    uicCode : Int
}

type TrainLocation {
    departureDate : Date
    speed : Int
    timestamp : DateTime
    trainNumber : Int
    location : [Float]
    train : Train
}

type Composition {
    departureDate : Date
    trainNumber : Int
    operatorShortCode : String
    trainCategoryId : Int
    trainTypeId : Int
    version : String
    operatorUicCode : Int
    train : Train
    journeySections : [JourneySection]
}

type JourneySection {
    id : Int
    departureDate : Date
    trainNumber : Int
    beginTimeTableRowId : Int
    endTimeTableRowId : Int
    maximumSpeed : Int
    totalLength : Int
    startTimeTableRow : TimeTableRow
    endTimeTableRow : TimeTableRow
    wagons : [Wagon]
    locomotives : [Locomotive]
}

type Locomotive {
    id : Int
    location : Int
    locomotiveType : String
    powerTypeAbbreviation : String
    journeysectionId : Int
    vehicleNumber : String
}

type Wagon {
    id : Int
    length : Int
    location : Int
    salesNumber : Int
    journeysectionId : Int
    catering : Boolean
    disabled : Boolean
    luggage : Boolean
    pet : Boolean
    playground : Boolean
    smoking : Boolean
    video : Boolean
    wagonType : String
    vehicleNumber : String
}

type Station {
    id : Int
    passengerTraffic : Boolean
    countryCode : String
    location : [Float]
    name : String
    shortCode : String
    uicCode : Int
    type : StationType
}

type CategoryCode {
    code : String
    name : String
    id : Int
    validFrom : Date
    validTo : Date
}

type DetailedCategoryCode {
    code : String
    name : String
    id : Int
    categoryCodeId : Int
    validFrom : Date
    validTo : Date
}

type ThirdCategoryCode {
    code : String
    name : String
    description : String
    id : Int
    validFrom : Date
    validTo : Date
    detailedCategoryCodeId : Int
}

type TrainTrackingMessage {
    id : Int
    trainNumber : String
    departureDate : Date
    stationShortCode : String
    nextStationShortCode : String
    previousStationShortCode : String
    version : String
    timestamp : DateTime
    trackSection : String
    nextTrackSection : String
    previousTrackSection : String
    type : TrainTrackingMessageType
    station : Station
    nextStation : Station
    previousStation : Station
    train : Train
}

type RoutesetMessage {
    id : Int
    version : String
    messageTime : DateTime
    trainNumber : String
    departureDate : Date
    routeType : String
    clientSystem : String
    routesections : [Routesection]
    train : Train
}

type Routesection {
    sectionId : String
    commercialTrackId : String
    stationCode : String
    station : Station
}

scalar Date
scalar DateTime

enum TimetableType {
    REGULAR,
    ADHOC
}
enum TimeTableRowType {
    ARRIVAL
    DEPARTURE
}

enum StationType {
    STATION, STOPPING_POINT, TURNOUT_IN_THE_OPEN_LINE
}
enum TrainTrackingMessageType {
    OCCUPY,RELEASE
}

input TrainFilter {
    and : [TrainFilter]
    or : [TrainFilter]

    cancelled : BooleanFilter
    commuterLineid : StringFilter
    deleted : BooleanFilter
    departureDate : DateFilter
    runningCurrently : BooleanFilter
    timetableAcceptanceDate : DateTimeFilter
    timetableType : EnumFilter
    trainNumber : IntegerFilter
    version : StringFilter
    operator : OperatorFilter
    trainType : TrainTypeFilter
    timeTableRows : TimeTableRowFilter
    trainLocations : TrainLocationFilter
    compositions : CompositionFilter
}

input TimeTableRowFilter {
    and : [TimeTableRowFilter]
    or : [TimeTableRowFilter]
    type : EnumFilter
    trainStopping : BooleanFilter
    commercialStop : BooleanFilter
    commercialTrack : StringFilter
    cancelled : BooleanFilter
    scheduledTime : DateTimeFilter
    actualTime : DateTimeFilter
    station : StationFilter
    causes : CauseFilter
}

input TrainTypeFilter {
    and : [TrainTypeFilter]
    or : [TrainTypeFilter]
    name : StringFilter
    trainCategory : TrainCategoryFilter
}

input TrainCategoryFilter {
    and : [TrainCategoryFilter]
    or : [TrainCategoryFilter]
    name : StringFilter
}

input OperatorFilter {
    and : [OperatorFilter]
    or : [OperatorFilter]
    name : StringFilter
    shortCode : StringFilter
    uicCode : IntegerFilter
}

input StationFilter {
    and : [StationFilter]
    or : [StationFilter]
    passengerTraffic : BooleanFilter
    countryCode : StringFilter
    location : CoordinateFilter
    name : StringFilter
    shortCode : StringFilter
    uicCode : IntegerFilter
    type : EnumFilter
}

input CauseFilter {
    and : [CauseFilter]
    or : [CauseFilter]
    categoryCode : CategoryCodeFilter
    detailedCategoryCode : DetailedCategoryCodeFilter
    thirdCategoryCode : ThirdCategoryCodeFilter
}

input CategoryCodeFilter {
    and : [CategoryCodeFilter]
    or : [CategoryCodeFilter]
    code : StringFilter
    name : StringFilter
    validFrom : DateFilter
    validTo : DateFilter
}

input DetailedCategoryCodeFilter {
    and : [DetailedCategoryCodeFilter]
    or : [DetailedCategoryCodeFilter]
    code : StringFilter
    name : StringFilter
    validFrom : DateFilter
    validTo : DateFilter
}

input ThirdCategoryCodeFilter {
    and : [ThirdCategoryCodeFilter]
    or : [ThirdCategoryCodeFilter]
    code : StringFilter
    name : StringFilter
    description : StringFilter
    validFrom : DateFilter
    validTo : DateFilter
}

input TrainLocationFilter {
    and : [TrainLocationFilter]
    or : [TrainLocationFilter]
    speed : IntegerFilter
    timestamp : DateTimeFilter
    location : CoordinateFilter
    train : TrainFilter
}

input CompositionFilter {
    and : [CompositionFilter]
    or : [CompositionFilter]
    version : StringFilter
    train : TrainFilter
    journeySections : JourneySectionFilter
}

input JourneySectionFilter {
    and : [JourneySectionFilter]
    or : [JourneySectionFilter]
    maximumSpeed : IntegerFilter
    totalLength : IntegerFilter
    startTimeTableRow : TimeTableRowFilter
    endTimeTableRow : TimeTableRowFilter
    wagons : WagonFilter
    locomotives : LocomotiveFilter
}

input LocomotiveFilter {
    and : [LocomotiveFilter]
    or : [LocomotiveFilter]
    location : IntegerFilter
    locomotiveType : StringFilter
    powerTypeAbbreviation : StringFilter
    vehicleNumber : StringFilter
}

input WagonFilter {
    and : [WagonFilter]
    or : [WagonFilter]
    id : IntegerFilter
    length : IntegerFilter
    location : IntegerFilter
    salesNumber : IntegerFilter
    catering : BooleanFilter
    disabled : BooleanFilter
    luggage : BooleanFilter
    pet : BooleanFilter
    playground : BooleanFilter
    smoking : BooleanFilter
    video : BooleanFilter
    wagonType : StringFilter
    vehicleNumber : StringFilter
}

input TrainTrackingMessageFilter {
    and : [TrainTrackingMessageFilter]
    or : [TrainTrackingMessageFilter]
    id : IntegerFilter
    version : StringFilter
    timestamp : DateTimeFilter
    trackSection : StringFilter
    nextTrackSection : StringFilter
    previousTrackSection : StringFilter
    type : EnumFilter
    station : StationFilter
    nextStation : StationFilter
    previousStation : StationFilter
    train : TrainFilter
}

input RoutesetMessageFilter {
    and : [RoutesetMessageFilter]
    or : [RoutesetMessageFilter]
    id : IntegerFilter
    version : StringFilter
    messageTime : DateTimeFilter
    trainNumber : StringFilter
    departureDate : DateFilter
    routeType : StringFilter
    clientSystem : StringFilter
    routesections : RoutesectionFilter
    train : TrainFilter
}

input RoutesectionFilter {
    and : [RoutesectionFilter]
    or : [RoutesectionFilter]
    sectionId : StringFilter
    commercialTrackId : StringFilter
    stationCode : StringFilter
    station : StationFilter
}

input BooleanFilter {
    eq : Boolean
}

input StringFilter {
    eq : String
}

input IntegerFilter {
    eq : Int
    gt : Int
    lt : Int
}

input EnumFilter {
    eq : String
}

input DateTimeFilter {
    eq : DateTime
    gt : DateTime
    lt : DateTime
}

input DateFilter {
    eq : Date
    gt : Date
    lt : Date
}

input CoordinateFilter {
    inside : [Float]
}
