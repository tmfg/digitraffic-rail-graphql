type Query {
    train(trainNumber : Int, departureDate : Date) : Train
    trainsGreaterThanVersion(version : String) : [Train]
    trains(departureDate : Date) : [Train]

    #    trainLocation(trainNumber : Int, departureDate : Date) : [TrainLocation]
    #
    #    composition(trainNumber : Int, departureDate : Date) : Composition
    #    compositions(departureDate : Date) : [Composition]
}

type Train {
    cancelled : Boolean
    commuterLineid : String
    deleted : Boolean
    departureDate : Date
    operatorShortCode : String
    runningCurrently : Boolean
    timetableAcceptanceDate : DateTime
    timetableType : TimetableType
    trainNumber : Int
    version : String
    trainTypeId : Int
    trainCategoryId : Int
    operator : Operator
    trainType : TrainType
    timeTableRows : [TimeTableRow]
    trainLocations : [TrainLocation]
    compositions : [Composition]
}

type TrainType {
    id : Int
    name : String
    trainCategoryId : Int
    trainCategory : TrainCategory
}

type TrainCategory {
    id : Int
    name : String
}

type TimeTableRow {
    stationShortCode : String
    stationUICCode : Int
    countryCode : String
    type : TimeTableRowType
    trainStopping : Boolean
    commercialStop : Boolean
    commercialTrack : String
    cancelled : Boolean
    scheduledTime : DateTime

    id : Int
    trainNumber : Int
    departureDate : Date

    causes : [Cause]
}

type Cause {
    timeTableRowId : Int
    trainNumber : Int
    departureDate : Date

    id : Int
    categoryCodeId : Int
    detailedCategoryCodeId : Int
    thirdCategoryCodeId : Int
}

type Operator {
    operatorName : String
    operatorShortCode : String
    operatorUicCode : Int
}

type TrainLocation {
    departureDate : Date
    speed : Int
    timestamp : DateTime
    trainNumber : Int
    location : [Float]
}

type Composition {
    departureDate : Date
    trainNumber : Int
    operatorShortCode : String
    trainCategoryId : Int
    trainTypeId : Int
    version : String
    operatorUicCode : Int
    journeySections : [JourneySection]
}

type JourneySection {
    id : Int
    departureDate : Date
    trainNumber : Int
    beginTimeTableRowId : Int
    endTimeTableRowId : Int
    maximumSpeed : Int
    totalLength : Int
    locomotives : [Locomotive]
    wagons : [Wagon]
}

type Locomotive {
    id : Int
    location : Int
    locomotiveType : String
    powerTypeAbbreviation : String
    journeysectionId : Int
    vehicleNumber : String
}

type Wagon {
    id : Int
    catering : Boolean
    disabled : Boolean
    length : Int
    location : Int
    luggage : Boolean
    pet : Boolean
    playground : Boolean
    salesNumber : Int
    smoking : Boolean
    video : Boolean
    wagonType : String
    vehicleNumber : String
    journeysectionId : Int
}

scalar Date
scalar DateTime

enum TimetableType {
    REGULAR,
    ADHOC
}
enum TimeTableRowType {
    ARRIVAL
    DEPARTURE
}
